<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cache="http://www.springframework.org/schema/cache" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/lang
        http://www.springframework.org/schema/lang/spring-lang-4.2.xsd
        http://www.springframework.org/schema/jee 
        http://www.springframework.org/schema/jee/spring-jee-4.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
        http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring
   		http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
        http://www.springframework.org/schema/cache 
        http://www.springframework.org/schema/cache/spring-cache-4.2.xsd"
        default-autowire="byName">

	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	
	<!-- 上传文件 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <property name="defaultEncoding" value="utf-8"/>
	    <!-- 最大内存大小 -->
	    <property name="maxInMemorySize" value="10240"/>
	    <!-- 最大文件大小，-1为不限制大小 -->
	    <property name="maxUploadSize" value="-1"/>
	</bean>
	
	<util:properties id="settings" location="/WEB-INF/pro.properties" />
	
	<!-- 自动扫描且只扫描@Controller -->
	<context:component-scan base-package="com.zealyo" />
	<context:component-scan base-package="com.lyceum" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
	</context:component-scan>

	<context:property-placeholder location="/WEB-INF/*.properties" />
	
	<mvc:annotation-driven/>  

	<mvc:resources mapping="/static/**" location="/static/" order="1" /> 

	<mvc:default-servlet-handler/> 
	 
	<!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" >
		<property name="messageConverters">
			<list>
				<!-- 负责读取二进制格式的数据和写出二进制格式的数据 application/octet-stream -->
   				<bean class='org.springframework.http.converter.ByteArrayHttpMessageConverter'/>
				<!-- 负责读取和写入json格式的数据  默认：application/json-->
				<bean class='org.springframework.http.converter.json.MappingJackson2HttpMessageConverter'><property name="supportedMediaTypes"><list><value>text/html;charset=UTF-8</value></list></property></bean>
				<!-- 负责读取字符串格式的数据和写出二进制格式的数据  默认text/plain-->
				<bean class='org.springframework.http.converter.StringHttpMessageConverter'><property name="supportedMediaTypes"><list><value>text/html;charset=UTF-8</value></list></property></bean>
				<!-- 负责读取资源文件和写出资源文件数据 -->
				<bean class='org.springframework.http.converter.ResourceHttpMessageConverter'></bean>
				<!-- 负责读取和写入 xml中  默认：application/xml-->
				<bean class='org.springframework.http.converter.xml.SourceHttpMessageConverter'></bean>
				
				<!-- <bean class='org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter'></bean> -->
	 		 	<!-- <bean class='org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter'/> -->
	 		 </list>
		</property>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	

	<!-- 开启事务注解驱动 -->  
    <tx:annotation-driven />  
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
	 	<property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}" /> 
        <property name="username" value="${jdbc.username}"/> 
        <property name="password" value="${jdbc.password}"/> 
    </bean>
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" >
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.lyceum.cms</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
			</props>
		</property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory"><ref bean="sessionFactory"/></property>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="false"/>

    <context:property-placeholder location="/WEB-INF/jdbc.properties"/> 
    	
	<!-- 配置freeMarker的模板路径 -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="classpath:/" />
		<property name="freemarkerVariables">
			<map>
				<entry key="url"><bean class="com.zealyo.asf.org.view.freemarker.tags.URLModel" /></entry>
				<entry key="xml_escape"><bean class="freemarker.template.utility.XmlEscape"/></entry>
			</map>
		</property>
		<!-- FreeMarker默认每隔5秒检查模板是否被更新，如果已经更新了，就会重新加载并分析模板。 但经常检查模板是否更新可能比较耗时。如果你的应用运行在生产模式下，而且你预期模板不会经常更新， 
			则可以将更新的延迟时间延长至一个小时或者更久。 可以通过为freemarkerSettings属性设置template_update_delay达到这一目的 -->
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">1</prop>
				<prop key="defaultEncoding">utf-8</prop>
				<prop key="tag_syntax">auto_detect</prop><!-- 设置标签类型 两种：[] 和 <> 。[] 这种标记解析要快些 -->
				<prop key="classic_compatible">true</prop><!-- 可以满足一般需要。默认情况变量为null则替换为空字符串，如果需要自定义，写上EmptyValue of fbysss的形式即可  -->
			</props>
		</property>
		<!-- 一下语句可以也可以配置freemarkerSettings属性，代码更为简洁 -->
		<!-- <property name="freemarkerSettings" ref="freemarkerConfiguration"></property> -->
	</bean>
	
	<!-- 配置freeMarker视图解析器 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
	    <property name="prefix" value="/" />
	    <property name="allowSessionOverride" value="true" />
	    <property name="exposeSpringMacroHelpers" value="true" />
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="requestContextAttribute" value="request" /> 
	    <property name="contentType" value="text/html;charset=UTF-8"/>
	    <property name="redirectContextRelative" value="false" />
	</bean>
</beans>